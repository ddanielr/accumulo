/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.accumulo.server.util;

import java.io.IOException;
import java.io.Writer;
import java.util.Set;

import javax.annotation.processing.AbstractProcessor;
import javax.annotation.processing.RoundEnvironment;
import javax.annotation.processing.SupportedAnnotationTypes;
import javax.annotation.processing.SupportedSourceVersion;
import javax.lang.model.SourceVersion;
import javax.lang.model.element.Element;
import javax.lang.model.element.ElementKind;
import javax.lang.model.element.TypeElement;
import javax.tools.Diagnostic;
import javax.tools.FileObject;
import javax.tools.StandardLocation;

import org.apache.accumulo.server.util.annotation.CommandName;

@SupportedAnnotationTypes("org.apache.accumulo.server.util.annotation.CommandName")
@SupportedSourceVersion(SourceVersion.RELEASE_11)
public class CommandNameProcessor extends AbstractProcessor {

  @Override
  public boolean process(Set<? extends TypeElement> set, RoundEnvironment roundEnvironment) {
    if (roundEnvironment.processingOver()) {
      return false;
    }
    try {
      generateCommandRegistry(roundEnvironment);
    } catch (IOException e) {
      processingEnv.getMessager().printMessage(Diagnostic.Kind.ERROR,
          "Failed to generate command registry: " + e.getMessage());
    }
    return true;
  }

  private void generateCommandRegistry(RoundEnvironment roundEnvironment) throws IOException {
    Set<? extends Element> annotatedElements =
        roundEnvironment.getElementsAnnotatedWith(CommandName.class);

    if (annotatedElements.isEmpty()) {
      return;
    }

    FileObject file = processingEnv.getFiler().createResource(StandardLocation.CLASS_PATH, "",
        "unique");

    try (Writer writer = file.openWriter()) {
      writer.write("package org.apache.accumulo.server.util.generated;\n\n");
      writer.write("import com.beust.jcommander.JCommander;\n");
      writer.write("import org.apache.accumulo.server.util.annotation.CommandName;\n");
      writer.write("import java.util.HashMap;\n");
      writer.write("import java.util.Map;\n\n");

      writer.write("/**\n");
      writer.write(" * Auto-generated registry of command classes and their program names.\n");
      writer
          .write(" * This class is generated by the CommandNameProcessor annotation processor.\n");
      writer.write(" */\n");
      writer.write("public class CommandRegistry {\n\n");

      writer.write(
          "    private static final Map<Class<?>, String> COMMAND_NAMES = new HashMap<>();\n\n");

      writer.write("    static {\n");

      // Process each annotated element
      for (Element element : annotatedElements) {
        if (element.getKind() != ElementKind.CLASS) {
          processingEnv.getMessager().printMessage(Diagnostic.Kind.ERROR,
              "@CommandName can only be applied to classes", element);
          continue;
        }

        TypeElement typeElement = (TypeElement) element;
        String className = typeElement.getQualifiedName().toString();
        CommandName annotation = element.getAnnotation(CommandName.class);
        String commandName = annotation.value();

        writer.write(String.format("        COMMAND_NAMES.put(%s.class, \"%s\");\n", className,
            commandName));
      }
      writer.write("    }\n\n");

      writer.write("    /**\n");
      writer
          .write("     * Creates a JCommander instance with the program name automatically set\n");
      writer.write("     * based on the registered command class.\n");
      writer.write("     * \n");
      writer.write("     * @param commandObject the command object instance\n");
      writer.write("     * @return configured JCommander instance\n");
      writer.write("     * @throws IllegalArgumentException if the class is not registered\n");
      writer.write("     */\n");
      writer.write("    public static JCommander createJCommander(Object commandObject) {\n");
      writer.write("        Class<?> clazz = commandObject.getClass();\n");
      writer.write("        String programName = COMMAND_NAMES.get(clazz);\n");
      writer.write("        \n");
      writer.write("        if (programName == null) {\n");
      writer.write("            throw new IllegalArgumentException(\n");
      writer.write(
          "                \"No command name registered for class: \" + clazz.getName());\n");
      writer.write("        }\n");
      writer.write("        \n");
      writer.write("        JCommander jc = new JCommander(commandObject);\n");
      writer.write("        jc.setProgramName(programName);\n");
      writer.write("        return jc;\n");
      writer.write("    }\n\n");

      writer.write("    /**\n");
      writer.write("     * Gets the program name for a given command class.\n");
      writer.write("     * \n");
      writer.write("     * @param commandClass the command class\n");
      writer.write("     * @return the program name, or null if not registered\n");
      writer.write("     */\n");
      writer.write("    public static String getProgramName(Class<?> commandClass) {\n");
      writer.write("        return COMMAND_NAMES.get(commandClass);\n");
      writer.write("    }\n\n");

      writer.write("    /**\n");
      writer.write("     * Checks if a command class is registered.\n");
      writer.write("     * \n");
      writer.write("     * @param commandClass the command class to check\n");
      writer.write("     * @return true if the class is registered, false otherwise\n");
      writer.write("     */\n");
      writer.write("    public static boolean isRegistered(Class<?> commandClass) {\n");
      writer.write("        return COMMAND_NAMES.containsKey(commandClass);\n");
      writer.write("    }\n");

      writer.write("}\n");
    }

    processingEnv.getMessager().printMessage(Diagnostic.Kind.NOTE, String
        .format("Generated CommandRegistry with %d command classes", annotatedElements.size()));
  }
}
